# Copyright 2022 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~
include "backend.conf"

appName = "teams-and-repositories"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]


# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes


# Modules
# ~~~~~
# For a microservice
#
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"
play.modules.enabled += "uk.gov.hmrc.teamsandrepositories.Module"
play.modules.enabled += "uk.gov.hmrc.teamsandrepositories.AwsCredentialsModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule" # required for internal-auth-client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"
play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
play.modules.enabled += "uk.gov.hmrc.internalauth.client.modules.InternalAuthModule"

# ErrorHandler
# ~~~~~
# Defining a verbose ErrorHandler to give meaningful logs

play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

play.filters.enabled += "play.filters.cors.CORSFilter"

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  uk.gov.hmrc.teamsandrepositories.controller.AdminController = {
    needsAuth     = false
    needsLogging  = false
  }
  uk.gov.hmrc.teamsandrepositories.controller.JenkinsController = {
    needsAuth     = false
    needsLogging  = false
  }
  uk.gov.hmrc.teamsandrepositories.controller.TeamsController = {
    needsAuth     = false
    needsLogging  = false
  }
  uk.gov.hmrc.teamsandrepositories.controller.RepositoriesController = {
    needsAuth     = false
    needsLogging  = false
  }
}


# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}


# Microservice specific config
auditing {
  enabled = false
  traceRequests = false
}


microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
    internal-auth {
      host = localhost
      port = 8470
    }

    service-configs {
      host = localhost
      port = 8460
    }

    slack-notifications {
      host = localhost
      port = 8866
    }
  }
}

url-templates {
  envrionments=[{
      name : "Development",
      services = [{
        name: "ser1"
        display-name: "ser 1"
        url: "http://ser1/$name"
      }, {
        name: "ser2"
        display-name: "ser 2"
        url: "http://ser2/$name"
      }]
    },{
      name : "Staging",
      services = [{
        name: "ser1"
        display-name: "ser 1"
        url: "http://ser1/$name"
      },{
        name: "ser2"
        display-name: "ser 2"
        url: "http://ser2/$name"
      }]
    }]

  prototype: "https://${app-name}.herokuapp.com"
}

shared.repositories = []

github.teams.to_rebuild = "platops"

mongodb {
  uri = "mongodb://localhost:27017/teams-and-repositories"
}

cache {
  teams {
    reloadEnabled = false
    initialDelay  = 1 minute
    duration      = 2 hours
  }

  jenkins {
    reloadEnabled = false
    initialDelay  = 1 minute
    duration      = 2 hours
  }

  scheduler {}
}

scheduler {
  metrix {
    enabled       = false
    initialDelay  = 1 second
    interval      = 20 seconds
  }
  rebuild = {
      enabled        = false
      initialDelay   = 3 minutes
      interval       = 2 hours
      minDaysUnbuilt = 30
  }
}

jenkins.url = "https://build.tax.service.gov.uk/"
jenkins.username = "user_not_set"
jenkins.token = "token_not_set"
github.open.api.user   = "user_not_set"
github.open.api.key    = "key_not_set"
github.open.api.url    = "https://api.github.com"
github.open.api.rawurl = "http://localhost:8461/github/raw"

github.retry.count        = 5
github.retry.initialDelay = 50.millis

ratemetrics.githubtokens.1.username = ${?github.open.api.user}
ratemetrics.githubtokens.1.token    = ${?github.open.api.key}


# for scheduling execution context, to not interfer with Controllers, which should always be responsive.
# The Controllers use the injectected execution context, which uses a fork-join-executor.
# Here we are using a limited thread-pool-excutor to ensure we don't steal resources
scheduler-dispatcher {
  type = Dispatcher
  executor = "uk.gov.hmrc.play.bootstrap.dispatchers.MDCPropagatingExecutorServiceConfigurator"
  thread-pool-executor {
    fixed-pool-size = 32
  }
}

build-deploy-api {
  url        = "http://localhost"
  host       = "localhost"
  aws-region = ""
}

slack {
    enabled             = false
    username            = "job-rebuilder"
    password            = development-only
    messageText         = "Rebuild failed for `{serviceName}` on Jenkins, build url `{buildUrl}`."
}